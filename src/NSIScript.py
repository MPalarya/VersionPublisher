import os
from pprint import pprint
import re
import subprocess

DEBUG = False
NSIS = r"C:\Program Files (x86)\NSIS\makensis.exe"


def build_header(script, company_name, product_name, product_version):
    script.write(
        """
; Script Generated by Python script created by Elbit System Land and C4I - Stations and Tools team

!define PRODUCT_NAME """ + "\"" + product_name + """\"
!define PRODUCT_VERSION """ + "\"" + product_version + """\"
!define COMPANY_NAME """ + "\"" + company_name + """\"
!define START_MENU_GROUP "${PRODUCT_NAME}"
!define START_MENU_ROOT "${PRODUCT_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

SetCompressor lzma

!include "MUI.nsh"

!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\orange-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\orange-uninstall.ico"
!define MUI_FINISHPAGE_RUN "$INSTDIR\Launcher.exe"
!define MUI_FINISHPAGE_RUN_PARAMETERS "/DEBUG"

; Pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_UNPAGE_INSTFILES
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS

; Installer Main Settings
Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "${PRODUCT_NAME} ${PRODUCT_VERSION} Installer.exe"
InstallDir "$PROGRAMFILES\${COMPANY_NAME}\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

; Installer file metadata
VIProductVersion "${PRODUCT_VERSION}"
VIAddVersionKey "ProductName" "${PRODUCT_NAME}"
VIAddVersionKey "ProductVersion" "${PRODUCT_VERSION}"
VIAddVersionKey "CompanyName" "${COMPANY_NAME}"
VIAddVersionKey "LegalCopyright" "${COMPANY_NAME}"
VIAddVersionKey "LegalTrademarks" ""
VIAddVersionKey "FileDescription" "${PRODUCT_NAME} Installer"
VIAddVersionKey "FileVersion" "${PRODUCT_VERSION}"

Section -Shortcuts
\tCreateDirectory "$SMPROGRAMS\${START_MENU_GROUP}"
\tCreateShortCut "$SMPROGRAMS\${START_MENU_GROUP}\Uninstall.lnk" "$INSTDIR\uninstall.exe"
\tCreateShortCut "$DESKTOP\${PRODUCT_NAME}.lnk" "$INSTDIR\Launcher.exe" "/DEBUG" "$INSTDIR\Launcher.ico"
SectionEnd

Section -Post
\tWriteUninstaller "$INSTDIR\uninstall.exe"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninstall.exe"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$EXEDIR"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${COMPANY_NAME}"
\tWriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "InstallPath" "$INSTDIR"
SectionEnd

"""
    )


def build_body(script, commands):
    i = 0
    to_delete = []
    for c in commands:
        copy_to_from_dic = {}
        curr_dir = c.source

        for dir_path, dir_names, file_names in os.walk(curr_dir):
            if not c.recursive:
                del dir_names[:]

            for f in file_names:

                if re.match(c.include_regex, f, flags=re.IGNORECASE) and not re.match(c.exclude_regex, f, flags=re.IGNORECASE):

                    src = os.path.join(dir_path, f)
                    if os.path.relpath(dir_path, curr_dir) != '.':
                        dst = os.path.join(c.destination, c.relative_path, os.path.relpath(dir_path, curr_dir), f)
                    else:
                        dst = os.path.join(c.destination, c.relative_path, f)

                    to_delete.append(dst)
                    key = os.path.dirname(dst)
                    val = src
                    if key in copy_to_from_dic:
                        copy_to_from_dic[key].append(val)
                    else:
                        copy_to_from_dic[key] = [val]

        if DEBUG:
            pprint(copy_to_from_dic)

        script.write("Section \"" + c.name + "\" SEC" + str(i) + "\nSectionIn RO\n")

        for k in copy_to_from_dic.keys():
            if "$APPDATA" in k:
                script.write("SetShellVarContext all\n")

            script.write("SetOutPath \"" + k + "\"\n")
            for v in copy_to_from_dic[k]:
                script.write("\tFile \"" + v + "\"\n")

            if "$APPDATA" in k:
                script.write("SetShellVarContext current\n")

        script.write("SectionEnd\n")
        script.write(";--------------------------------------------------\n")

        i += 1

    script.write("Section \"Uninstall\"\n")
    for x in to_delete:
        script.write("\tDelete \"" + x + "\"\n")


def build_footer(script):
    script.write(
        """
\tDelete "$DESKTOP\${PRODUCT_NAME}.lnk"
\tDelete "$SMPROGRAMS\${START_MENU_GROUP}\Uninstall.lnk"
\tRMDir /r "$INSTDIR"
\tRMDir /r "$SMPROGRAMS\${START_MENU_GROUP}"
\t;DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
\tDeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
\tSetAutoClose true
SectionEnd
;--------------------------------------------------

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
FunctionEnd
        """
    )


def create_script(commands, company_name, product_name, product_version, output_folder):
    script_path = os.path.join(output_folder, product_name + ".nsi")

    with open(script_path, 'w') as script:
        build_header(script, company_name, product_name, product_version)
        build_body(script, commands)
        build_footer(script)

    return script_path


def compile_script(nsi_script_path):
    print "\n>>> Creating Installer...\n"
    cmd = [NSIS, nsi_script_path]
    subprocess.call(cmd)
